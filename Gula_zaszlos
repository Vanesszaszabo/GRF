/////////////////////////////////////////////////////////////////////         
// circle.cpp
//
// This program draws a line loop with vertices equally apart on 
// a fixed circle. The larger the number of vertices the better
// the loop approximates the circle.
//
// Interaction:
// Press +/- to increase/decrease the number of vertices of the loop. 
//
// Sumanta Guha.
///////////////////////////////////////////////////////////////////// 

#define _USE_MATH_DEFINES 

#include <cstdlib>
#include <cmath>
#include <iostream>

#include <GL/glew.h>
#include <GL/freeglut.h> 

// Globals.

static float R = 5.0; // Radius of circle.
static float X = 0.0; // X-coordinate of center of circle.
static float Y = 0.0;
static float a = 0.0;// Y-coordinate of center of circle.
static int numVertices = 10;

void drawScene(void)
{
	float t = 0; // Angle parameter.
	int i;

	glClear(GL_COLOR_BUFFER_BIT);

	// Draw a line loop with vertices at equal angles apart on a circle
	// with center at (X, Y) and radius R, The vertices are colored randomly.
	//glRotatef(-90.0, 1.0, 0.0, 0.0);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

	glLoadIdentity();
	float pervx = X + R * cos(t), pervy = Y + R * sin(t);
	gluLookAt(a, a, 10, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

	glRotatef(-90, 1.0, 0.0, 0.0);
	glColor3f(0.0, 0.0, 0.0);
	for (i = 0; i <= numVertices; ++i)
	{
		if (i % 2 == 1) {
			glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
			glBegin(GL_TRIANGLES);
			glColor3f(1.0, 0.0, 0.0);
		}
		else {
			glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
			glBegin(GL_LINE_LOOP);
			glColor3f(0.0, 0.0, 0.0);
		}
		glVertex3f(0.0, 0.0, 0.0);
		glVertex3f(pervx, pervy, 0.0);
		glVertex3f(X + R * cos(t), Y + R * sin(t), 0.0);
		glEnd();
		if (i % 2 == 1) {
			glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
			glBegin(GL_TRIANGLES);
			glColor3f(1.0, 0.0, 0.0);
		}
		else {
			glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
			glBegin(GL_LINE_LOOP);
			glColor3f(0.0, 0.0, 0.0);
		}
		//glVertex3f(0.0, 0.0, R);
		glVertex3f(pervx, pervy, 0.0);
		glVertex3f(X + R * cos(t), Y + R * sin(t), 0.0);
		glEnd();
		pervx = X + R * cos(t), pervy = Y + R * sin(t);
		t += 2 * M_PI / numVertices;

	}
	glutSolidCone(R, R, numVertices, numVertices);
	glBegin(GL_LINES);
	glColor3f(0.0, 0.0, 1.0);
	glVertex3f(0.0, 0.0, R);
	glVertex3f(0.0, 0.0, R + 3);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glColor3f(0.0, 0.0, 1.0);
	glVertex3f(0.0, 0.0, R + 3);
	glVertex3f(3, 2.5, R + 3);
	glVertex3f(0.0, 0.0, R + 0.5);
	glEnd();



	glFlush();
}

// Initialization routine.
void setup(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//glOrtho(-10.0, 10.0, -10.0, 10.0, -1.0, 1.0);
	glFrustum(-5.0, 5.0, -5.0, 5.0, 5.0, 30.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	std::cout << a << std::endl;
	switch (key)
	{
	case 27:
		exit(0);
		break;
	case 'x':
		if (true)
		{
			a += 1.0;
		}
		glutPostRedisplay();
		break;
	case 'y':
		if (true)
		{
			a -= 1.0;
		}
		glutPostRedisplay();
		break;
	default:
		break;
	}
}

// Routine to output interaction instructions to the C++ window.
void printInteraction(void)
{
	std::cout << "Interaction:" << std::endl;
	std::cout << "Press +/- to increase/decrease the number of vertices on the circle." << std::endl;
}

// Main routine.
int main(int argc, char** argv)
{
	printInteraction();
	glutInit(&argc, argv);

	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("circle.cpp");
	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}
