#include  #include #include  static int step = 0;  float camTranX = 0.0, camTranY = 0.0, camTranZ = 0.0; float camX = 0.0, camY = 2.0, camZ = 5.0;  static float vertices[] = { 2.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, -1.0, 2.0, 0.0, -1.0, -2.0, 0.0, 1.0, -2.0, 2.0, 1.0, -2.0, 2.0, -1.0, -2.0, 0.0, -1.0, -1.0, 3.5, 0.0, 1.0, 3.5, 0.0, -0.5, 1, 1, 0.5, 1, 1, -0.5, 0, 1, 0.5, 0, 1 };  static unsigned char hazSzelekStrip[] = { 1, 0, 2, 3, 6, 7, 5, 4 }; static unsigned char hazAljaStrip[] = { 0, 4, 3, 7 }; static unsigned char tetoStrip[] = { 5, 8, 6, 9, 2, 1 }; static unsigned char tetoStrip2[] = { 1, 9, 5, 8 }; static unsigned char ajtoStrip[] = { 12, 10, 13, 11 }; static unsigned char utcaFrontStrip[] = { 4, 12, 5, 10, 1, 11, 0, 13 };  void setup(void) { glClearColor(1.0, 1.0, 1.0, 0.0); glEnable(GL_DEPTH_TEST); }  void drawScene(void) { glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); glLoadIdentity();  gluLookAt(0.0, 2.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0); glTranslatef(camTranX, camTranY, camTranZ);  glEnableClientState(GL_VERTEX_ARRAY); glVertexPointer(3, GL_FLOAT, 0, vertices);  // Piros glColor3f(0.9, 0.0, 0.0); glDrawElements(GL_TRIANGLE_STRIP, 8, GL_UNSIGNED_BYTE, hazSzelekStrip); glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_BYTE, hazAljaStrip); glDrawElements(GL_TRIANGLE_STRIP, 8, GL_UNSIGNED_BYTE, utcaFrontStrip);  // Kék glColor3f(0.0, 0.0, 0.9); glDrawElements(GL_TRIANGLE_STRIP, 6, GL_UNSIGNED_BYTE, tetoStrip); glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_BYTE, tetoStrip2);  // Zöld ajtó glColor3f(0.0, 0.9, 0.0); glPushMatrix(); glTranslatef(-0.5, 0.0, 1.0); glRotatef((float)step, 0.0, -1.0, 0.0); glTranslatef(0.5, 0.0, -1.0); glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_BYTE, ajtoStrip); glPopMatrix();  // Lila gombok glColor3f(0.3, 0.1, 0.9);  glPushMatrix(); glTranslatef(-1.5, 0.5, 0.5); glutSolidSphere(0.5, 10, 10); glPopMatrix();  glPushMatrix(); glTranslatef(-1.5, 0.5, -0.5); glutSolidSphere(0.5, 10, 10); glPopMatrix();  glPushMatrix(); glTranslatef(1.5, 0.5, 0.5); glutSolidSphere(0.5, 10, 10); glPopMatrix();  glPushMatrix(); glTranslatef(1.5, 0.5, -0.5); glRotatef(-130, 0.0, 1.0, 0.0); glutSolidTeapot(0.5); glPopMatrix();  glDisable(GL_CULL_FACE);  glutSwapBuffers(); }  void resize(int w, int h) { glViewport(0, 0, w, h); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluPerspective(60.0, (float)w / (float)h, 1.0, 20.0); glMatrixMode(GL_MODELVIEW); }  void keyInput(unsigned char key, int x, int y) { switch (key) { case 27: exit(0); break; default: break; } }  void specialKeyInput(int key, int x, int y) { if (key == GLUT_KEY_F1) if (step < 180) step++; if (key == GLUT_KEY_F2) if (step > 0) step--; if (key == GLUT_KEY_DOWN) { camTranY += 0.1; camY += 0.1; } if (key == GLUT_KEY_UP) { camTranY -= 0.1; camY -= 0.1; } if (key == GLUT_KEY_LEFT) { camTranX += 0.1; camX += 0.1; } if (key == GLUT_KEY_RIGHT) { camTranX -= 0.1; camX -= 0.1; } if (key == GLUT_KEY_PAGE_UP) { camTranZ += 0.1; camZ += 0.1; } if (key == GLUT_KEY_PAGE_DOWN) { camTranZ -= 0.1; camZ -= 0.1; }  glutPostRedisplay(); }  int main(int argc, char** argv) { glutInit(&argc, argv); glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH); glutInitWindowSize(600, 600); glutInitWindowPosition(100, 100); glutCreateWindow("Színezett ház fények nélkül"); glewInit(); setup(); glutDisplayFunc(drawScene); glutReshapeFunc(resize); glutKeyboardFunc(keyInput); glutSpecialFunc(specialKeyInput); glutIdleFunc(drawScene); glutMainLoop(); return 0; }