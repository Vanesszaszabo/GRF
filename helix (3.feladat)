///////////////////////////////////////////////////////         
// helix.cpp
//
// This program approximates a helix with a line strip.
//
// Sumanta Guha.
///////////////////////////////////////////////////////        

#define _USE_MATH_DEFINES 

#include <cstdlib>
#include <cmath>
#include <iostream>

#include <GL/glew.h>
#include <GL/freeglut.h>

static int isStriped = 0;
static int stripeSize = 1;
static int stepSize = 1;


// Drawing routine.
void drawScene(void)
{
	float R = 10.0; // Radius of helix.

	float t; // Angle parameter.
	std::cout << "Striped Flag:" << isStriped << std::endl;
	std::cout << "stripeSize:" << stripeSize << std::endl;

	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	glColor3f(0.0, 0.0, 0.0);
	/*
	glPointSize(10.0);
	glColor3f(255.0, 0.0, 0.0);
	glBegin(GL_POINT);
	glVertex3f(0.0f, 0.0f, 0.0f);
	glEnd();
	*/

	// xt1 = (10pi - t)*sint
	// yt1 = t
	// zt1 = (10pi-t)*cost

	// xt2 = (10pi - t)*sin(-t)
	// yt2 = -t
	// zt2 = (10pi-t)*cos(-t)
	if (isStriped == 1) glBegin(GL_LINES); else glBegin(GL_LINE_STRIP);
	int counter = 0;
	for (t = 0 * M_PI; t <= 10 * M_PI; t += M_PI / 20.0) {
		counter += 1;
		if (counter % stripeSize != 0) continue;
		//glVertex3f(R * cos(t), R * sin(t), t - 60.0);
		//glVertex3f(R * cos(t), t, R * sin(t) - 60.0);
		glVertex3f((R * M_PI - t) * sin(t), t, (R * M_PI - t) * cos(t) - 60.0);
		//glVertex3f((R * M_PI - t) * sin(-t), -t, (R * M_PI - t) * cos(-t) - 60.0);
	}
	glEnd();
	if (isStriped == 1) glBegin(GL_LINES); else glBegin(GL_LINE_STRIP);
	for (t = 0 * M_PI; t <= 10 * M_PI; t += M_PI / 20.0) {
		counter += 1;
		if (counter % stripeSize != 0) continue;
		//glVertex3f(R * cos(t), R * sin(t), t - 60.0);
		//glVertex3f(R * cos(t), t, R * sin(t) - 60.0);
		//glVertex3f((R * M_PI - t) * sin(t), t, (R * M_PI - t) * cos(t) - 60.0);
		glVertex3f((R * M_PI - t) * sin(-t), -t, (R * M_PI - t) * cos(-t) - 60.0);
	}

	glEnd();

	glFlush();
}

// Initialization routine.
void setup(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//glOrtho(-50.0, 50.0, -50.0, 50.0, 0.0, 100.0);
	glFrustum(-5.0, 5.0, -5.0, 5.0, 5.0, 200.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		exit(0);
		break;
	case ' ':
		if (isStriped == 0) { isStriped = 1; }
		else { isStriped = 0; }
		glutPostRedisplay();
		break;
	case '+':
		if (isStriped == 1) {
			stripeSize += stepSize;
		}
		glutPostRedisplay();
		break;
	case '-':
		if (isStriped == 1 && stripeSize > 1) {
			stripeSize -= stepSize;
		}
		glutPostRedisplay();
		break;
	default:
		break;
	}
}

// Main routine.
int main(int argc, char** argv)
{
	glutInit(&argc, argv);

	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("helix.cpp");
	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}
