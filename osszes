// P betű

///////////////////////////////////
// square.cpp
//
// OpenGL program to draw a square.
// 
// Sumanta Guha.
///////////////////////////////////
#define _USE_MATH_DEFINES

#include <cmath>
#include <GL/glew.h>
#include <GL/freeglut.h> 

static float N = 40.0;
static float X = 400.0;
static float Y = 400.0;
static float t = 2.0;
static float ortho = 3.0;

// Drawing routine.
void drawScene(void)
{
	float angle;
	float i;
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(1.0, 0.0, 0.0);

	// Draw a polygon with specified vertices.
	glBegin(GL_POLYGON);
	glVertex3f(40.0, 30.0, 0.0);
	glVertex3f(50.0, 30.0, 0.0);
	glVertex3f(50.0, 90.0, 0.0);
	glVertex3f(40.0, 90.0, 0.0);
	glEnd();

	glBegin(GL_TRIANGLE_STRIP);
	glRotatef(-90.0, 1.0, 0.0, 0.0);

	for (i = 0; i <= N; i++) {
		angle = -4.75 + 1.1 * M_PI * i / N;
		glVertex3f(50 - cos(angle) * 10.0, 70 - sin(angle) * 10.0, 0.0);
		glVertex3f(50 - cos(angle) * 20.0, 70 - sin(angle) * 20.0, 0.0);
	}
	glEnd();

	glFlush();
}

// Initialization routine.
void setup(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(30, 80, 20, 100, -1.0, 1.0);
	//glOrtho(-ortho, ortho, -ortho, ortho, -1.0, 1.0);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		exit(0);
		break;
	default:
		break;
	}
}

// Main routine.
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowSize(X, Y);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("square.cpp");
	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}

// 2. feladat
///////////////////////////////////
// square.cpp
//
// OpenGL program to draw a square.
// 
// Sumanta Guha.
///////////////////////////////////
#define _USE_MATH_DEFINES

#include <cmath>
#include <GL/glew.h>
#include <GL/freeglut.h> 

static float N = 40.0;
static float X = 400.0;
static float Y = 400.0;
static float t = 2.0;
static float ortho = 3.0;

// Drawing routine.
void drawScene(void)
{
	glClear(GL_COLOR_BUFFER_BIT);

	glBegin(GL_LINES);
	glColor3f(1.0, 0.0, 0.0);
	glVertex3f(X * (-1), 0.0, 0.0);
	glVertex3f(X, 0.0, 0.0);
	glVertex3f(0.0, Y * (-1), 0.0);
	glVertex3f(0.0, Y, 0.0);

	glEnd();

	//1/2*x^3+x^2+1
	glBegin(GL_LINE_STRIP);
	glColor3f(0.0, 0.0, 1.0);
	float yt = 0;
	for (float i = t * (-1); i <= t; i += 0.1) {
		yt = 0.5 * (i * i * i) + (i * i) + 1;
		glVertex3f(i, yt, 0.0);
	}
	glEnd();


	glFlush();
}

// Initialization routine.
void setup(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-ortho, ortho, -ortho, ortho, -1.0, 1.0);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		exit(0);
		break;
	default:
		break;
	}
}

// Main routine.
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowSize(X, Y);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("square.cpp");
	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}

// 3.feladat
///////////////////////////////////////////////////////         
// helix.cpp
//
// This program approximates a helix with a line strip.
//
// Sumanta Guha.
///////////////////////////////////////////////////////        

#define _USE_MATH_DEFINES 

#include <cstdlib>
#include <cmath>
#include <iostream>

#include <GL/glew.h>
#include <GL/freeglut.h>

static int isStriped = 0;
static int stripeSize = 1;
static int stepSize = 1;


// Drawing routine.
void drawScene(void)
{
	float R = 10.0; // Radius of helix.

	float t; // Angle parameter.
	std::cout << "Striped Flag:" << isStriped << std::endl;
	std::cout << "stripeSize:" << stripeSize << std::endl;

	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	glColor3f(0.0, 0.0, 0.0);
	/*
	glPointSize(10.0);
	glColor3f(255.0, 0.0, 0.0);
	glBegin(GL_POINT);
	glVertex3f(0.0f, 0.0f, 0.0f);
	glEnd();
	*/

	// xt1 = (10pi - t)*sint
	// yt1 = t
	// zt1 = (10pi-t)*cost

	// xt2 = (10pi - t)*sin(-t)
	// yt2 = -t
	// zt2 = (10pi-t)*cos(-t)
	if (isStriped == 1) glBegin(GL_LINES); else glBegin(GL_LINE_STRIP);
	int counter = 0;
	for (t = 0 * M_PI; t <= 10 * M_PI; t += M_PI / 20.0) {
		counter += 1;
		if (counter % stripeSize != 0) continue;
		//glVertex3f(R * cos(t), R * sin(t), t - 60.0);
		//glVertex3f(R * cos(t), t, R * sin(t) - 60.0);
		glVertex3f((R * M_PI - t) * sin(t), t, (R * M_PI - t) * cos(t) - 60.0);
		//glVertex3f((R * M_PI - t) * sin(-t), -t, (R * M_PI - t) * cos(-t) - 60.0);
	}
	glEnd();
	if (isStriped == 1) glBegin(GL_LINES); else glBegin(GL_LINE_STRIP);
	for (t = 0 * M_PI; t <= 10 * M_PI; t += M_PI / 20.0) {
		counter += 1;
		if (counter % stripeSize != 0) continue;
		//glVertex3f(R * cos(t), R * sin(t), t - 60.0);
		//glVertex3f(R * cos(t), t, R * sin(t) - 60.0);
		//glVertex3f((R * M_PI - t) * sin(t), t, (R * M_PI - t) * cos(t) - 60.0);
		glVertex3f((R * M_PI - t) * sin(-t), -t, (R * M_PI - t) * cos(-t) - 60.0);
	}

	glEnd();

	glFlush();
}

// Initialization routine.
void setup(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//glOrtho(-50.0, 50.0, -50.0, 50.0, 0.0, 100.0);
	glFrustum(-5.0, 5.0, -5.0, 5.0, 5.0, 200.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		exit(0);
		break;
	case ' ':
		if (isStriped == 0) { isStriped = 1; }
		else { isStriped = 0; }
		glutPostRedisplay();
		break;
	case '+':
		if (isStriped == 1) {
			stripeSize += stepSize;
		}
		glutPostRedisplay();
		break;
	case '-':
		if (isStriped == 1 && stripeSize > 1) {
			stripeSize -= stepSize;
		}
		glutPostRedisplay();
		break;
	default:
		break;
	}
}

// Main routine.
int main(int argc, char** argv)
{
	glutInit(&argc, argv);

	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("helix.cpp");
	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}

// 4. feladat
//4.feladat
///////////////////////////////////////////////////////////////////////////////////////          
// hemisphere.cpp
//
// This program approximates a hemisphere with an array of latitudinal triangle strips.
//
// Interaction:
// Press P/p to increase/decrease the number of longitudinal slices.
// Press Q/q to increase/decrease the number of latitudinal slices.
// Press x, X, y, Y, z, Z to turn the hemisphere.
//
// Sumanta Guha.
/////////////////////////////////////////////////////////////////////////////////////// 

#define _USE_MATH_DEFINES 

#include <cmath>
#include <iostream>

#include <GL/glew.h>
#include <GL/freeglut.h>

// Globals.
static float R = 5.0; // Radius of hemisphere.
static int p = 8; // Number of longitudinal slices.
static int q = 8; // Number of latitudinal slices.
static float Xangle = 0.0, Yangle = 0.0, Zangle = 0.0; // Angles to rotate hemisphere.

// Initialization routine.
void setup(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

// Drawing routine.
void drawScene(void)
{
	int  i, j;

	glClear(GL_COLOR_BUFFER_BIT);

	glLoadIdentity();

	// Command to push the hemisphere, which is drawn centered at the origin, 
	// into the viewing frustum.
	glTranslatef(0.0, 0.0, -10.0);

	// Commands to turn the hemisphere.
	glRotatef(Zangle, 0.0, 0.0, 1.0);
	glRotatef(Yangle, 0.0, 1.0, 0.0);
	glRotatef(Xangle, 1.0, 0.0, 0.0);

	// Hemisphere properties.
	//glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);

	glColor3f(0.0, 0.0, 0.0);

	// Array of latitudinal triangle strips, each parallel to the equator, stacked one
	// above the other from the equator to the north pole.
	int latmod = 0;
	int longmod = 0;

	for (int j = 0; j < q; j++) {
		//float phi1 = (float)j / q * (M_PI / 2.0);       // Bottom latitude
		//float phi2 = (float)(j + 1) / q * (M_PI / 2.0); 
		float phi1 = (float)j / q * (M_PI);       // Bottom latitude
		float phi2 = (float)(j + 1) / q * (M_PI);  // Top latitude

		// Iterate over longitude bands
		for (int i = 0; i < p; i++) {
			longmod = (int)i % 2;
			longmod == 1 ? glColor3f(0.0, 1.0, 0.0) : glColor3f(1.0, 0.0, 0.0);
			if (longmod == 1) continue; //Ez kimetszi minden 2 slice-t, ha viszont ezt ki comment-k akkor 2 külön színűnk lesz
			float theta1 = 2.0 * M_PI * i / p;
			float theta2 = 2.0 * M_PI * (i + 1) / p;

			// Compute all four points of the quad
			float x1 = R * cos(phi1) * cos(theta1);
			float y1 = R * sin(phi1);
			float z1 = -R * cos(phi1) * sin(theta1);

			float x2 = R * cos(phi2) * cos(theta1);
			float y2 = R * sin(phi2);
			float z2 = -R * cos(phi2) * sin(theta1);

			float x3 = R * cos(phi2) * cos(theta2);
			float y3 = R * sin(phi2);
			float z3 = -R * cos(phi2) * sin(theta2);

			float x4 = R * cos(phi1) * cos(theta2);
			float y4 = R * sin(phi1);
			float z4 = -R * cos(phi1) * sin(theta2);

			glPolygonMode(GL_FRONT, GL_FILL);
			glPolygonMode(GL_BACK, GL_LINE);
			// First triangle (v1, v2, v3)
			glBegin(GL_TRIANGLES);
			glVertex3f(x1, y1, z1);
			glVertex3f(x2, y2, z2);
			glVertex3f(x3, y3, z3);
			glEnd();

			// Second triangle (v1, v3, v4)
			glBegin(GL_TRIANGLES);
			glVertex3f(x1, y1, z1);
			glVertex3f(x3, y3, z3);
			glVertex3f(x4, y4, z4);
			glEnd();

			glPolygonMode(GL_FRONT, GL_LINE);
			glPolygonMode(GL_BACK, GL_FILL);
			// First triangle (v1, v2, v3)
			glBegin(GL_TRIANGLES);
			glVertex3f(x1, -y1, z1);
			glVertex3f(x2, -y2, z2);
			glVertex3f(x3, -y3, z3);
			glEnd();

			// Second triangle (v1, v3, v4)
			glBegin(GL_TRIANGLES);
			glVertex3f(x1, -y1, z1);
			glVertex3f(x3, -y3, z3);
			glVertex3f(x4, -y4, z4);
			glEnd();
		}
	}

	glFlush();
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(-5.0, 5.0, -5.0, 5.0, 5.0, 100.0);
	glMatrixMode(GL_MODELVIEW);
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		exit(0);
		break;
	case 'P':
		p += 1;
		glutPostRedisplay();
		break;
	case 'p':
		if (p > 3) p -= 1;
		glutPostRedisplay();
		break;
	case 'Q':
		q += 1;
		glutPostRedisplay();
		break;
	case 'q':
		if (q > 3) q -= 1;
		glutPostRedisplay();
		break;
	case 'x':
		Xangle += 5.0;
		if (Xangle > 360.0) Xangle -= 360.0;
		glutPostRedisplay();
		break;
	case 'X':
		Xangle -= 5.0;
		if (Xangle < 0.0) Xangle += 360.0;
		glutPostRedisplay();
		break;
	case 'y':
		Yangle += 5.0;
		if (Yangle > 360.0) Yangle -= 360.0;
		glutPostRedisplay();
		break;
	case 'Y':
		Yangle -= 5.0;
		if (Yangle < 0.0) Yangle += 360.0;
		glutPostRedisplay();
		break;
	case 'z':
		Zangle += 5.0;
		if (Zangle > 360.0) Zangle -= 360.0;
		glutPostRedisplay();
		break;
	case 'Z':
		Zangle -= 5.0;
		if (Zangle < 0.0) Zangle += 360.0;
		glutPostRedisplay();
		break;
	default:
		break;
	}
}

// Routine to output interaction instructions to the C++ window.
void printInteraction(void)
{
	std::cout << "Interaction:" << std::endl;
	std::cout << "Press P/p to increase/decrease the number of longitudinal slices." << std::endl
		<< "Press Q/q to increase/decrease the number of latitudinal slices." << std::endl
		<< "Press x, X, y, Y, z, Z to turn the hemisphere." << std::endl;
}

// Main routine.
int main(int argc, char **argv)
{
	printInteraction();
	glutInit(&argc, argv);

	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("hemisphere.cpp");
	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}
